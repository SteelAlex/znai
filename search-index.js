znaiSearchData = [["@@index@@","","Index","","Znai is a system that generates user facing documentation from markdown files. Documentation files are located next to your product codebase and are part of your product's software development lifecycle. Znai provides extensions to simplify your day-to-day documentation processes and to improve maintenance in the long run.Continue reading to learn more about:RationaleStructuring your documentationLeveraging existing code snippets and test resultsDiagrams supportUI documentation techniquesPresentation modeExtremely fast navigationLocal search with auto-previewIf you are reading this documentation for the first time, we suggest you read from start to finish."],["introduction@@rationale@@stale-documentation","Introduction","Rationale","Stale Documentation","Keeping documentation up to date is a hard task. It's often the case that the more separated your documentation is from the code it's describing, the more likely it won't be updated when a feature is added or changed.Depending on your product and clients, stale documentation can cause: Lost time for users Reputational damage"],["introduction@@rationale@@part-of-workflow","Introduction","Rationale","Part Of Workflow","As part of your code review today, you likely check that:No design violations are committedNo subtle bugs are introducedAll tests are updatedNow, it is time to add to that list:Documentation is updated"],["introduction@@rationale@@maintenance","Introduction","Rationale","Maintenance","Keeping documentation up to date takes time. Even non-functional changes may require documentation updates. Here are some activities that most likely put your documentation out of sync:Moving UI elements aroundRe-naming REST response fieldsRemoving redundant command line parametersRenaming public API classesYour codebase probably already contains a vast amount of data. Instead of using copy-and-paste to duplicate that data in your documentation, you should leverage the already-existing artifacts.Examples of how to use API (part of code)Config filesTest resultsWeb UIRESTCLIBusiness logic"],["introduction@@rationale@@familiar-approach","Introduction","Rationale","Familiar Approach","Markup is everywhereStackOverflowGitHubJupyterRedditDiscourseMarkup-based documentation is widely used as wellOpen source projects (ReactJS, Pandas, Spark)Technical books (O'Reilly, Manning)Big companies (Google, FaceBook)"],["introduction@@rationale@@presentations","Introduction","Rationale","Presentations","Znai builds presentations to:Show new featuresTeach a class from your documentationLike all documentation, maintaining presentations takes effort. Instead of building separate slides and trying to keep them up to date, this system automatically generates slides from your documentation content."],["introduction@@example@@markdown","Introduction","Example","Markdown","Znai uses Markdown, a markup language that uses ASCII to represent styles and page structure."],["introduction@@example@@external-references","Introduction","Example","External References","Additionally, you can keep your documentation up to date and accurate by referencing existing resources. markdown # Server Configuration :include-file: config/server.config Note: This include-file macro is a Znai extension and not part of a standard Markdown syntax."],["introduction@@getting-started@@command-line-tool","Introduction","Getting Started","Command Line Tool","Znai comes with a command line tool that:Generates a documentation websiteRuns auto-preview on a local serverRuns documentation server"],["introduction@@getting-started@@markdown","Introduction","Getting Started","Markdown","The fastest way to learn Markdown is to go to http://commonmark.org/help/ CommonMark website and go through a 60 second cheatsheet or 10 minute tutorial."],["introduction@@getting-started@@installation","Introduction","Getting Started","Installation","Download and unzip https://repo.maven.apache.org/maven2/org/testingisdocumenting/znai/znai-dist/${project.version}/znai-dist-${project.version}-znai.zip znai. Add it to your PATH .Note: https://brew.sh/ brew support is currently in progress."],["introduction@@getting-started@@scaffolding","Introduction","Getting Started","Scaffolding","To create a minimum set of files for your documentation execute znai --new znai |--chapter-one |--page-one.md |--page-two.md |--chapter-two |--page-three.md |--page-four.md |--toc |--lookup-paths |--meta.json Use the znai-maven-plugin https://maven.apache.org/ Maven plugin to scaffold docs in Maven project. <plugin> <groupId>org.testingisdocumenting.znai</groupId> <artifactId>znai-maven-plugin</artifactId> <version>1.30</version> <configuration> <docId>my-docs</docId> <sourceRoot>${project.basedir}/documentation</sourceRoot> <port>3333</port> </configuration> </plugin> mvn znai:new"],["introduction@@getting-started@@preview","Introduction","Getting Started","Preview","Navigate to the newly created directory. Start preview mode by running: znai --preview [--port port-number] Or using Maven: mvn znai:preview The command will output a URL that directs to your preview.Blue eye icon in the top right corner indicates that preview is on. Open any text editor, modify and save page-one.md file. Changes will be reflected in the browser. The default port number is 3333."],["introduction@@getting-started@@deploy","Introduction","Getting Started","Deploy","See deployment/static-content deployment strategy"],["flow@@structure@@building-blocks","Flow","Structure","Building Blocks","Znai has three levels of documentation organization:ChaptersPagesPage Sections Znai encourages authors to split their content across multiple pages.If you feel like you need to use nested headings, consider moving your content hierarchy one level up:Split overlong page into multiple onesIntroduce chaptersFocus on one thing at a time"],["flow@@structure@@similarity-with-oop","Flow","Structure","Similarity with OOP","It may be useful to compare documentation design to an object-oriented programming approach:Chapters as packages Pages as classes Page Sections as methods It is a bad practice to have a class with loosely related methods. Similarly, it is a bad practice to have a long page with loosely related sections."],["flow@@structure@@table-of-contents","Flow","Structure","Table of Contents","Each documentation must have toc file in its root. This file contains chapters and pages.This is a toc file for this documentation. introduction rationale example getting-started flow structure names page-references lookup-paths search footer presentation testing shortcuts snippets code-snippets external-code-snippets inlined-code-snippets api-parameters code-references java java-doc groovy typescript cpp json xml open-API CLI math jupyter-notebook markdown layout attention-signs tabs tables columns templates two-sides-pages two-sides-tabs jupyter-notebook-two-sides visuals spoilers smart-bullet-points icons keyboard-shortcuts charts images image-annotations SVG flow-diagrams PlantUml deployment static-content static-hosting synergy-with-testing java REST web-UI configuration basic example-references domain api Take a look at the left side bar and compare it with the file content.The top entry, introduction , corresponds to the directory of the same name. The nested entry, rationale , corresponds to the file rationale.md ."],["flow@@structure@@sub-headings","Flow","Structure","Sub Headings","Only a first level heading is treated as a first class citizen:Part of TOCSmallest unit of search result # First Class Citizen Nested sub headings only add visual distinction within a page. ## Sub heading content of sub heading ### Sub Sub heading content of sub sub heading content of sub headingcontent of sub sub heading"],["flow@@structure@@meta","Flow","Structure","Meta","Each documentation must have the meta.json file in its root. This JSON file contains documentation display name, type, and optional View On information. { \"title\": \"Znai\", \"type\": \"User Guide\", \"viewOn\": { \"link\": \"https://github.com/testingisdocumenting/znai/blob/master/znai-docs/documentation\", \"title\": \"View On GitHub\" } }"],["flow@@names@@automatic-names","Flow","Page Titles","Automatic Names","By default, page names are automatically derived from file names. file-name.md has the page title File Name ."],["flow@@names@@name-overrides","Flow","Page Titles","Name Overrides","To override the default, add the following syntax to the top of your Markdown file: --- title: Custom Name --- To keep things easy for future documentation owners, it's good practice to keep page and file names the same. In some cases, however, you want to make exceptions, for example, in cases where you:Need to use special characters in titleWant to avoid auto-capitalization"],["flow@@page-references@@follow-the-order","Flow","Page References","Follow the Order","The best documentation should be arranged with a natural order to follow. Links to navigate to the next page are at the end of each page.Create links to remind users of essential concepts introduced previously. There is a good chance that a reader skipped over these or forgot about them.Avoid: links that navigate users forward. It breaks the flow of a documentation."],["flow@@page-references@@links","Flow","Page References","Links","To create an external link use: markdown [Link Title](http://external/reference) To refer internal page within your documentation use: markdown [internal link](dir-name/file-name#optional-page-section-id) Note: you can get page-section-id by hovering over a section title and pressing link icon. Your browser URL display the updated link.To refer back to the top-level index page use: markdown [index link](/) Linking to subsections is the same as linking to a top level section. flow/page-references#links-to-subsection Here is an example markdown [Here is an example](flow/page-references#links-to-subsection) Use #links Subsection Shortcut if a subsection is within the same page: markdown [Subsection Shortcut](#links) Clicking this / index page link will have the same effect as clicking the documentation title at the top of the Navigation Panel"],["flow@@page-references@@downloads","Flow","Page References","Downloads","Linking to a local file will deploy the file along with the generated documentation. Clicking the link will open a file using the browser's default method. Download [test json file](data/test.json) Download data/test.json test json file"],["flow@@page-references@@validation","Flow","Page References","Validation","Local links are automatically validated during documentation build time. You will get a build time error if you refer to a page or a section/sub-section that does not exist."],["flow@@lookup-paths@@files-reference-lookup","Flow","Lookup Paths","Files Reference Lookup","When you refer to a file using plugins like :include-file: my-file.cpp Znai tries to find the file in following locations:directory with the markup file that refers my-file.cpp documentation root directorylocations enumerated inside <doc-root>/lookup-paths file txt ../examples ../module/src/main/java"],["flow@@lookup-paths@@http-lookup-location","Flow","Lookup Paths","HTTP Lookup Location","If files you want to include are not part of your project, you can add an HTTP base URL to lookup-paths . txt ../examples ../module/src/main/java https://raw.githubusercontent.com/testingisdocumenting/webtau/master If the file is not found using local locations, it will be fetched from the provided urls. :include-file: .travis.yml language: java jdk: - openjdk8 - openjdk11 cache: directories: - $HOME/.m2 - $HOME/.npm - node_modules dist: xenial services: - xvfb addons: chrome: stable apt: packages: - graphviz # disables the default install step which is mvn install skipping tests install: true script: mvn -B package"],["flow@@search@@local","Flow","Search","Local","To perform a local search of your documentation press / key or click the search section in the side panel on the left.In flow/structure documentation structure we learned that documentation consist ofChaptersPagesPage SectionsThese entities play different and important roles in search. Search treats each Page Section as an independent unit. Each Page Section has an internally defined title that is a combination of all three titles.Title match during search yields the highest score.For example this current section full title is: Flow Search Local.As your documentation grows, keep checking how easy it is to navigate to a section of your documentation using / .Avoid: using generic names in your page titles and page section titles. You should not have dozens of pages called Introduction"],["flow@@search@@global","Flow","Search","Global","Besides local search capabilities, Znai provides a search entry XML file for your documentation. This file can be crawled to expose your documentation to external search engines.Your search entry file can be located at the following endpoint: <base-url>/<doc-id>/search-entries.xml For example, the search entry for the Znai documentation on Github is located at https://testingisdocumenting.org/znai/search-entries.xml https://testingisdocumenting.org/znai/search-entries.xml"],["flow@@footer@@definition","Flow","Footer","Definition","To define a footer, create a footer.md file in the root directory of your documentation files. Footer content will be treated as regular page content, i.e., you can use the standard Markdown and all the custom extensions.Content in footer.md will be displayed at the bottom of each page."],["flow@@presentation@@equal-flow","Flow","Presentation","Equal Flow","When people build presentations, there should be great focus on the flow of information, making sure that those newly introduced to the topic are not lost. A poorly organized presentation might drive users seeking clarification to documentation, which too often is just as unfriendly to neophytes.Presentation mode in Znai is meant to help with both issues, mutually reinforcing good flow in presentations and documentation."],["flow@@presentation@@presentation-mode","Flow","Presentation","Presentation Mode","Znai can turn any page into a presentation. Simply click icon:resize-full to the far fight of each page title.In presentation mode, only certain documentation elements are converted to slides:HeadingsBulletsImages and graphicsCode snippetsCommand line inputMathTablesIf you write your documentation with a presentation in mind it should improve the flow of your documentation."],["flow@@testing@@user-scenarios","Flow","Testing","User Scenarios","Focus your documentation on scenarios users can perform. Before documenting them, you need to make sure that they actually work. You could perform a manual test every time you release your software, but it is time consuming and error-prone.Alternatively, you could write automated tests to make sure that scenarios you are writing about are validated. At test run time, capture test produced artifacts:Command line outputScreenshotsBusiness logic calculationREST responsesConfig filesScript snippetsRuntime dependencies DAGs...Include the captured artifacts inside your documentation to keep it up to date.As you write your documentation you will come up with new scenarios to test. As you write tests, think about your documentation and what test-produced artifacts can improve it.In this documentation you will learn how to include artifacts. There are also examples of synergy between tests and documentation in the later chapters."],["flow@@shortcuts@@keyboard-shortcuts","Flow","Shortcuts","Keyboard shortcuts","Action Shortcut Change to presentation mode p Change to print mode Alt + p Change to default mode ESC Activate search / Navigate to a previous page Ctrl + Left arrow Navigate to a next page Ctrl + Right arrow"],["snippets@@code-snippets@@simple-snippet","Snippets","Code Snippets","Simple Snippet","It is very easy to add a code snippet or an output result. All you have to do is indent your code with 4 spaces inside your Markdown document and your code will be rendered like this. interface PriceService { Money calcPrice(String cuips, Integer quantity); } # Simple Snippet It is very easy to add a code snippet or an output result. All you have to do is indent your code with 4 spaces inside your Markdown document and your code will be rendered like this. interface PriceService { Money calcPrice(String cuips, Integer quantity); } Note: this method doesn't highlight code."],["snippets@@code-snippets@@specifying-language","Snippets","Code Snippets","Specifying Language","You can also specify a language to enable syntax highlighting for your snippet. ```javascript import React, {Component} from 'react' class MyComponent extends Component { render() { /// ... } } ``` javascript import React, {Component} from 'react' class MyComponent extends Component { render() { /// ... } } The following languages are supported:JavaJavaScriptGroovyC++PythonBash Znai uses http://prismjs.com prismjs library to provide syntax highlighting. Note that it is not being executed inside the browser, but rather applied during HTML generation."],["snippets@@code-snippets@@title","Snippets","Code Snippets","Title","Use the title property to specify a title. ```javascript {title: \"ReactJS Component\"} ... ``` javascript import React, {Component} from 'react' class MyComponent extends Component { render() { /// ... } }"],["snippets@@code-snippets@@wide-code","Snippets","Code Snippets","Wide Code","Use the wide option to stretch wide code to occupy as much horizontal real estate as possible. ```java {wide: true} class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } ``` java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Without the wide option code will be aligned with the rest of the text and users can use scrollbars. java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Note: Good placement of a Wide Code element is at the end of a page or a section to show the full version of a code sample."],["snippets@@code-snippets@@read-more","Snippets","Code Snippets","Read More","If you have a large code snippet and you want to initially display only a small fraction use the readMore option with an optional readMoreVisibleLines option to specify a number of initial lines displayed (default is 8). ```java {readMore: true, readMoreVisibleLines: 3} public class DocScaffolding { private final Path workingDir; private Map<String, List<String>> fileNameByDirName; ... ``` java public class DocScaffolding { private final Path workingDir; private Map<String, List<String>> fileNameByDirName; public DocScaffolding(Path workingDir) { this.workingDir = workingDir; this.fileNameByDirName = new LinkedHashMap<>(); } public void create() { createPages(); createToc(); createMeta(); createIndex(); createLookupPaths(); } private void createLookupPaths() { createFileFromResource(\"lookup-paths\"); } private void createMeta() { createFileFromResource(\"meta.json\"); } }"],["snippets@@code-snippets@@highlights","Snippets","Code Snippets","Highlights","Use the highlight option to bring readers attention to important lines. ```java {highlight: \"workingDir\"} public class DocScaffolding { private final Path workingDir; private Map<String, List<String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } ``` java public class DocScaffolding { private final Path workingDir; private Map<String, List<String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } Note: You will get a build-time error if the specified substring is not found in any of the snippet linesIt is recommended to pass a substring, but you can pass a line idx (starts from 0). Additionally you can combine two approaches and pass a list of things to highlight. ```java {highlight: [2, \"...\"]} public class DocScaffolding { private final Path workingDir; private Map<String, List<String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } ``` java public class DocScaffolding { private final Path workingDir; private Map<String, List<String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } Note: Order of lines to highlight is reflected during presentation mode"],["snippets@@external-code-snippets@@embedding-content","Snippets","External Code Snippets","Embedding Content","To reduce documentation maintenance burden avoid copy and paste of code snippets. Embed content by referencing existing files using the :include-file: plugin instead. :include-file: file-name.js This include- syntax will appear throughout the documentation and represents a family of custom Markdown extensions. class JsClass { constructor() { usefulAction() } } export default JsClass The file will be looked up using following rules:directory with a markup fileroot directory of a documentationall lookup paths listed in a lookup-paths file"],["snippets@@external-code-snippets@@title","Snippets","External Code Snippets","Title",":include-file: file-name.js {title: \"ES6 class\"} Use the title property to specify a title. class JsClass { constructor() { usefulAction() } } export default JsClass"],["snippets@@external-code-snippets@@wide-code","Snippets","External Code Snippets","Wide Code","Use the wide option to stretch wide code to occupy as much horizontal screen real estate as possible. :include-file: WideCode.java {wide: true} class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Without the wide option code will be aligned with the rest of the text and users can use scrollbars. class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Note: Good placement of a Wide Code element is at the end of a page or a section to show the full version of a code sample."],["snippets@@external-code-snippets@@read-more","Snippets","External Code Snippets","Read More","If you have a file with large code snippet and you want to initially display only a small fraction use readMore option with an optional readMoreVisibleLines option to specify a number of initial lines displayed (default is 8). :include-file: LongFile.java {readMore: true, readMoreVisibleLines: 3} public class DocScaffolding { private final Path workingDir; private Map<String, List<String>> fileNameByDirName; public DocScaffolding(Path workingDir) { this.workingDir = workingDir; this.fileNameByDirName = new LinkedHashMap<>(); } public void create() { createPages(); createToc(); createMeta(); createIndex(); createLookupPaths(); } private void createLookupPaths() { createFileFromResource(\"lookup-paths\"); } private void createMeta() { createFileFromResource(\"meta.json\"); } }"],["snippets@@external-code-snippets@@highlights","Snippets","External Code Snippets","Highlights","Use the highlight option to bring readers attention to the important lines. :include-file: file-name.js {highlight: \"export\"} class JsClass { constructor() { usefulAction() } } export default JsClass It is recommended to pass a substring, but you can pass a line idx (starts from 0). Additionally you can combine two approaches and pass a list of things to highlight. :include-file: file-name.js {highlight: [\"export\", 1]} class JsClass { constructor() { usefulAction() } } export default JsClass Note: Order of lines to highlight is reflected during presentation modeUse the highlightPath option to highlight lines specified in a separate file. :include-file: file-name.js {highlightPath: \"lines-to-highlight.txt\"} class JsClass { constructor() { usefulAction() } } export default JsClass class usefulAction"],["snippets@@external-code-snippets@@callout-comments","Snippets","External Code Snippets","Callout Comments","If you already have comments inside your code it would be non effecient to repeat them inside documentation. Instead comments can be automatically extracted and presented as part of the textGiven file with inlined comments class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules By specifying commentsType :include-file: file-name-with-comments.js {commentsType: \"inline\"} It will be rendered as class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules"],["snippets@@external-code-snippets@@spoilers","Snippets","External Code Snippets","Spoilers","Set the spoiler property to initially hide explanations. It may be useful when teaching. :include-file: file-name-with-comments.js {commentsType: \"inline\", spoiler: true} Click on the spoiler to reveal the explanations: class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules"],["snippets@@inlined-code-snippets@@backtick","Snippets","Inlined Code Snippets","Backtick","To display inline code within regular text, simply put it inside a backtick.Example: To check if an Exchange is closed, you need to use ExchangeCalendar # Backtick To display inline code within regular text, simply put it inside a backtick."],["snippets@@inlined-code-snippets@@from-file","Snippets","Inlined Code Snippets","From File","To display inline code from a file, use the file backtick plugin.Example: To access this feature navigate to . Example: To access this feature navigate to `:file: urlsample.txt`."],["snippets@@api-parameters@@inlined-csv","Snippets","API Parameters","Inlined CSV","When you are not able to automatically extract an API parameter definition you can use the api-parameters fence plugin to manually document them. ```api-parameters firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ```"],["snippets@@api-parameters@@nested","Snippets","API Parameters","Nested","Use parent.children syntax to define nested objects like this: ```api-parameters sessionId, Integer, session Id person, Person, person to login with person.firstName, String, first name of the person person.lastName, String, last name of the person roles, List<Role>, list of authorized roles roles.id, String, role id roles.description, String, role description ``` Note: when using this approach it is necessary to explicitly define a root entry, such as person in this example.Note: if a parameter name actually contains a period (\".\"), you can prevent this nesting behavior by putting the parameter name in single quotes, e.g. 'person.firstName'"],["snippets@@api-parameters@@title","Snippets","API Parameters","Title","Use the title parameter to specify a title. ```api-parameters {title: \"Person Definition\"} firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ```"],["snippets@@api-parameters@@external-json-file","Snippets","API Parameters","External JSON File","Instead of hardcoding your parameters inside markdown files, you can specify an external JSON file. JSON could be generated based on the data you have. Some of the examples:build time annotation processortest time command line parameters generationGiven the above file, use :include-api-parameters: api-parameters.json {title: \"Person Definition\"} to display it as API ParametersNote: description field in JSON file is treated as Markdown"],["snippets@@code-references@@local-references","Snippets","Code References","Local References","You can turn parts of a code snippet into links to internal or external pages.To do that, define references in a CSV file, using a two column format: expression, link . constructor, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor usefulAction, flow/footer :include-file: file-name.js {referencesPath: \"references/references-demo.csv\"} class JsClass { constructor() { usefulAction() } } export default JsClass"],["snippets@@code-references@@global-references","Snippets","Code References","Global References","Add references to references.csv if you want all your code snippets to use the same references. fapi.book, example-references/api#book fapi.query, example-references/api#query import * as fapi from 'flight-api' function bookFlight(flightInfo) { const confirmation = fapi.book(flightInfo) //... } function flightStatus(id) { const fullStatus = fapi.query(id) return fullStatus.shortStatus }"],["snippets@@code-references@@inlined-code","Snippets","Code References","Inlined Code","snippets/inlined-code-snippets Inlined code is automatically converted into a link if its content matches one of the global references entries: Use `fapi.book` to book a flight. Use fapi.book to book a flight."],["snippets@@java@@method-body","Snippets","Java","Method Body","When you need to extract a specific method body, use the include-java plugin.Consider the file below: /** * Top level conceptual description of a {@link CustomDomain} problem. * <p> * To avoid <b>copy & paste</b> of the content consider to re-use information. */ class HelloWorld { /** * Each year we hire students from different universities to increase * <code>diversity</code> */ private int numberOfStudents; /** * Conceptual description of a <i>Domain</i> problem. * <p> * It will work only if you put high level description here and * <b>not</b> implementation details. * * @param p1 important parameter of something * @param p2 sample <i>offset</i> according to the rules of the universe * @return name of the <b>best</b> sample */ public String sampleMethod(String p1, int p2) { validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample(); } public void sampleMethod(Map<String, Integer> p1, int p2, boolean isActive) { // overloaded method } /** * @param trader trader that performs action * @param transaction transaction to perform action on */ public void importantAction(Trader trader, Transaction transaction) { // TODO important } public Data createData() { // create data } } You can specify a method name to extract its full definition, or display only its body. :include-java: HelloWorld.java {entry: \"sampleMethod\", bodyOnly: true} If bodyOnly is specified, signature will be omitted. validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample();"],["snippets@@java@@callout-comments","Snippets","Java","Callout Comments","Similar to how you snippets/external-code-snippets#callout-comments specify comments type for a regular file, you can specify commentsType option for include-java . :include-java: HelloWorld.java {entry: \"sampleMethod\", bodyOnly: true, commentsType: \"inline\"} validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample();"],["snippets@@java@@signature-only","Snippets","Java","Signature Only","You can also specify a method name and extract only its signature. :include-java: HelloWorld.java {entry: \"sampleMethod\", signatureOnly: true} If signatureOnly is specified, body will be omitted. public String sampleMethod(String p1, int p2)"],["snippets@@java@@overloads","Snippets","Java","Overloads","Specify types inside brackets to select an overloaded versions of your methods.Types should appear as they are in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin. :include-java: HelloWorld.java {entry: \"sampleMethod(Map, int, boolean)\"} Note: Generic types are erased and spaces after commas are optional public void sampleMethod(Map<String, Integer> p1, int p2, boolean isActive) { // overloaded method }"],["snippets@@java@@type-body","Snippets","Java","Type Body","To extract class , interface or enum body use: :include-java: MyEnum.java {entry: \"MyEnum\"} enum MyEnum { /** * description of <b>entry one</b> */ ENTRY_ONE, /** * description of entry two * <ul> * <li>item one</li> * <li>item two</li> * </ul> */ ENTRY_TWO, /** * Don't use, instead use ENTRY_TWO */ @Deprecated ENTRY_THREE } Use bodyOnly to only display body of your type. :include-java: MyEnum.java {entry: \"MyEnum\", bodyOnly: true} /** * description of <b>entry one</b> */ ENTRY_ONE, /** * description of entry two * <ul> * <li>item one</li> * <li>item two</li> * </ul> */ ENTRY_TWO, /** * Don't use, instead use ENTRY_TWO */ @Deprecated ENTRY_THREE"],["snippets@@java@@multiple-entries","Snippets","Java","Multiple Entries","To display multiple methods at once use entries parameter to pass a list of method names. :include-java: HelloWorld.java {entries: [\"createData\", \"importantAction\"]} This will render: public Data createData() { // create data } public void importantAction(Trader trader, Transaction transaction) { // TODO important } List important methods signatures at one place by passing signatureOnly: true . :include-java: HelloWorld.java {entries: [\"createData\", \"importantAction\"], signatureOnly: true} This will render: public Data createData() public void importantAction(Trader trader, Transaction transaction)"],["snippets@@java@@multiple-overloads","Snippets","Java","Multiple Overloads","To list of the overloads of a method, specify method name using the entries parameter. :include-java: HelloWorld.java {entries: \"sampleMethod\", signatureOnly: true} public String sampleMethod(String p1, int p2) public void sampleMethod(Map<String, Integer> p1, int p2, boolean isActive)"],["snippets@@java-doc@@class-level","Snippets","Java Doc","Class Level","Documentation maintenance is one of the main goals of this documentation system. In the case of Java you may already use JavaDoc strings to explain certain concepts of your system. /** * Top level conceptual description of a {@link CustomDomain} problem. * <p> * To avoid <b>copy & paste</b> of the content consider to re-use information. */ class HelloWorld { /** * Each year we hire students from different universities to increase * <code>diversity</code> */ private int numberOfStudents; /** * Conceptual description of a <i>Domain</i> problem. * <p> * It will work only if you put high level description here and * <b>not</b> implementation details. * * @param p1 important parameter of something * @param p2 sample <i>offset</i> according to the rules of the universe * @return name of the <b>best</b> sample */ public String sampleMethod(String p1, int p2) { validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample(); } public void sampleMethod(Map<String, Integer> p1, int p2, boolean isActive) { // overloaded method } /** * @param trader trader that performs action * @param transaction transaction to perform action on */ public void importantAction(Trader trader, Transaction transaction) { // TODO important } public Data createData() { // create data } } Instead of copy-and-pasting text between sources, you can refer to it inside your documentation. :include-java-doc: HelloWorld.java Text bellow is extracted from top class level JavaDoc null"],["snippets@@java-doc@@method-level","Snippets","Java Doc","Method Level","Method level JavaDoc text can be referred to as well by specifying the entry parameter. :include-java-doc: HelloWorld.java {entry: \"sampleMethod\"} Text bellow is extracted from sampleMethod method JavaDoc sampleMethod"],["snippets@@java-doc@@field-level","Snippets","Java Doc","Field Level",":include-java-doc: HelloWorld.java {entry: \"numberOfStudents\"} numberOfStudents"],["snippets@@java-doc@@handling-links","Snippets","Java Doc","Handling Links","Links defined with {@link MyClass} are automatically converted to snippets/inlined-code-snippets Inlined Code and become MyClass . To turn MyClass into a link you need to use snippets/code-references Code References.Use the referencesPath value to associate {@link CustomDomain} with the documentation link: CustomDomain, example-references/domain Trader, example-references/domain#trader Transaction, example-references/domain#transaction BUY, example-references/domain#buy SELL, example-references/domain#sell Alternatively you can define snippets/code-references#global-references Global References to turn MyClass into a link."],["snippets@@java-doc@@method-params","Snippets","Java Doc","Method Params",":include-java-doc-params: HelloWorld.java {entry: \"sampleMethod\"} p1 String important parameter of something p2 int sample <i>offset</i> according to the rules of the universe return String name of the <b>best</b> sample Use the title parameter to specify a title. :include-java-doc-params: HelloWorld.java {entry: \"importantAction\", title: \"Trading Required Parameters\"} trader Trader trader that performs action transaction Transaction transaction to perform action on"],["snippets@@java-doc@@method-params-with-references","Snippets","Java Doc","Method Params With References","Use the snippets/code-references Code References file to link method parameters to reference pages.To do that, define references in a CSV file, using a two column format: type-or-variable-name, link . CustomDomain, example-references/domain Trader, example-references/domain#trader Transaction, example-references/domain#transaction BUY, example-references/domain#buy SELL, example-references/domain#sell :include-java-doc-params: HelloWorld.java { entry: \"importantAction\", title: \"Trading Required Parameters\", referencesPath: \"references/javadoc-references-demo.csv\"} trader Trader trader that performs action transaction Transaction transaction to perform action on Parameters are now linked with a reference section for the documentation."],["snippets@@java-doc@@enum-entries","Snippets","Java Doc","Enum Entries","Use include-java-enum-entries to enumerate entries of a enum from a file. package my.company; enum MyEnum { /** * description of <b>entry one</b> */ ENTRY_ONE, /** * description of entry two * <ul> * <li>item one</li> * <li>item two</li> * </ul> */ ENTRY_TWO, /** * Don't use, instead use ENTRY_TWO */ @Deprecated ENTRY_THREE } :include-java-enum-entries: MyEnum.java ENTRY_ONE description of <b>entry one</b> ENTRY_TWO description of entry two <ul> <li>item one</li> <li>item two</li> </ul> ENTRY_THREE Don't use, instead use ENTRY_TWO You can exclude deprecated entries from the list by setting the excludeDeprecated parameter. :include-java-enum-entries: MyEnum.java {excludeDeprecated: true} ENTRY_ONE description of <b>entry one</b> ENTRY_TWO description of entry two <ul> <li>item one</li> <li>item two</li> </ul> ENTRY_THREE Don't use, instead use ENTRY_TWO Use the title parameter to specify a title. :include-java-enum-entries: TransactionTypes.java {title: \"Transaction Types\"} BUY buy intrument SELL sell instrument"],["snippets@@java-doc@@enum-entries-with-references","Snippets","Java Doc","Enum Entries With References","Use a snippets/code-references Code References file to link enum entries to reference pages.To do that, define references in a CSV file, using a two column format: enum-name, link . CustomDomain, example-references/domain Trader, example-references/domain#trader Transaction, example-references/domain#transaction BUY, example-references/domain#buy SELL, example-references/domain#sell package my.company; enum TransactionTypes { /** * buy intrument */ BUY, /** * sell instrument */ SELL } :include-java-enum-entries: TransactionTypes.java { title: \"Transaction Types\", referencesPath: \"references/javadoc-references-demo.csv\" } BUY buy intrument SELL sell instrument Enums are now linked with a reference section for the documentation.Note: you can reuse the same CSV file for Enums, Parameters, Code Snippets. Alternatively, you can use snippets/code-references#global-references Global References."],["snippets@@groovy@@method-body","Snippets","Groovy","Method Body","When you need to extract a specific method body use the include-groovy plugin.Consider the following file:Specify a method name to extract it from the file. :include-groovy: HelloWorldTest.groovy {entry: \"should calculate risk based on epsilon\", bodyOnly: true} If bodyOnly is specified, signature will be omitted."],["snippets@@groovy@@overloads","Snippets","Groovy","Overloads","Specify types inside brackets to select an overloaded versions of your methods.Types should appear as they do in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin. :include-groovy: HelloWorld.groovy {entry: \"methodName(List, Map)\"} :include-groovy: HelloWorld.groovy {entry: \"methodName(def,def)\"} Note: Generic types are erased and spaces after commas are optionalNote: def type remains def and not Object"],["snippets@@groovy@@class-body","Snippets","Groovy","Class Body","import your.company.com.util.* /* groovy docs on top */ class HelloWorld { void methodName(List<String> a, Map<String, Integer> b) { actionA() } void methodName(List<String> a, Boolean b) { actionB() } void methodName(def a, def b) { actionC() } } To extract class body use: :include-groovy: HelloWorld.groovy {entry: \"HelloWorld\"} Use bodyOnly to only display only the body of your class. :include-groovy: HelloWorld.groovy {entry: \"HelloWorld\", bodyOnly: true}"],["snippets@@typescript@@parsing","Snippets","Typescript","Parsing","Znai uses typescript nodejs module to parse TypeScript. Use the typescript plugin to include parsed information."],["snippets@@typescript@@properties","Snippets","Typescript","Properties","/** * top level doc string */ export class Customer { /** * customer's first name */ firstName: string; /** * customer's last name */ lastName: string; /** * method A <b>description</b> and some * @param {string} input for <i>test</i> */ methodA(input: string) { console.log('method a body'); console.log('test22'); } } Use the propertiesOf parameter to list properties of a specified class. :include-typescript: typescript/Customer.ts {propertiesOf: \"Customer\"}"],["snippets@@typescript@@jsx-elements","Snippets","Typescript","JSX Elements","import { PrimaryButton } from 'my-lib'; function buttonsDemo(registry) { registry .add('primary', <PrimaryButton label=\"Click Me\"/>) .add('primary disabled', <PrimaryButton label=\"Click Me\" disabled={true}/>); } Use the jsxElementsFrom to extract JSX elements from a function. :include-typescript: typescript/demo.tsx {jsxElementsFrom: \"buttonsDemo\"}"],["snippets@@cpp@@comments","Snippets","Cpp","Comments","You can reuse comments that are inside your functions and refer to them inside your documentation. Mark a comment with @znai and use :include-cpp-comments: plugin. int my_func() { // @znai important context information goes here // this information is useful and can be re-used inside a user guide code_goes_here(); // this comment is not marked another_code(); /* @znai another piece of **documentation** in multiple lines, but it will be treated as `markdown` */ } Specify a file and an entry point to extract comments from. :include-cpp-comments: comments.cpp {entry: \"my_func\"} Result will be a text rendered as if it was typed inside markup file. See the text immediately below:"],["snippets@@json@@paths","Snippets","Json","Paths","Use the include-json plugin to bring attention to a certain place in a JSON file. :include-json: book-store.json {paths: [\"root.store.book[0].category\", \"root.store.book[2].category\"]} Comma-separated paths specified inside paths will be highlighted."],["snippets@@json@@paths-from-file","Snippets","Json","Paths From File","Use pathsFile to specify a file to read paths from. :include-json: book-store.json {pathsFile: \"book-store-paths.json\"}"],["snippets@@json@@json-subparts","Snippets","Json","Json Subparts","To include only a portion of your document pass https://github.com/json-path/JsonPath Json Path as include property: :include-json: book-store.json {include: \"$..book[0,1]\"}"],["snippets@@json@@title","Snippets","Json","Title","To specify a title use the title property: :include-json: book-store.json {include: \"$..book[0,1]\", title: \"Books\"}"],["snippets@@json@@read-more","Snippets","Json","Read More","Use readMore to show only first lines of JSON . Optional readMoreVisibleLines can be specified to set the initial number of lines to display :include-json: book-store.json {readMore: true, readMoreVisibleLines: 5}"],["snippets@@json@@hidden-parts","Snippets","Json","Hidden Parts","To hide sub-parts of your JSON use collapsedPaths property. :include-json: book-store.json {collapsedPaths: ['root.store.book']}"],["snippets@@json@@highlights","Snippets","Json","Highlights","To highlight a specific JSON value using paths , in (similar fashion to snippets/external-code-snippets#highlights regular code snippets), you can highlight a line by text matching or by providing a line index. :include-json: book-store.json {highlight: [\"category\", 2]}"],["snippets@@json@@code-references","Snippets","Json","Code References","You can turn parts of JSON into links to internal or external pages."],["snippets@@json@@test-results","Snippets","Json","Test Results","Consider leveraging testing frameworks to extract JSON samples from your endpoints. Information about what assertions were made can be used to highlight points of interest."],["snippets@@xml@@highlight-parts","Snippets","Xml","Highlight Parts","Use the include-xml plugin to bring attention to a certain place in a XML file.Comma-separated paths specified inside paths will be highlighted. :include-xml: menu.html {paths: [\"ul.@class\", \"ul.li[1].@class\", \"ul.li[2]\"]} Note: Children index in paths starts with 0 and is associated with a tag :include-xml: simple.xml {paths: [\"root.a[1]\", \"root.b[0]\", \"root.c[0]\"]}"],["snippets@@xml@@use-cases","Snippets","Xml","Use Cases","include-xml and paths can be used to document:XML ConfigCSS selectorsReactJS propertiesAngularJS templatesIn presentation mode, paths will be highlighted one at a time."],["snippets@@xml@@title","Snippets","Xml","Title","Use the title property to specify a title. :include-xml: menu.html {title: \"Menu snippet\"}"],["snippets@@open-API@@operation-definition","Snippets","Open API","Operation definition","If you have a file with an https://github.com/OAI/OpenAPI-Specification/blob/master/README.md Open API definition (a.k.a. a Swagger file) you can render it by a given method and path , or by operationId . Both yaml and json formats are supported.Let's consider https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v2.0/json/uber.json Uber's API definition as an example: :include-open-api: open-api/uber.json {method: \"get\", path: \"/v1/estimates/time\"} Note: descriptions are treated as Markdown, using the http://commonmark.org/help/ CommonMark specification"],["snippets@@open-API@@producesconsumes","Snippets","Open API","Produces/Consumes","By default produces and consumes parts are not displayed. If you are documenting a modern API, chances are it will be consistent and you can specify at the start of your documentation that you are dealing with application/json .Use showConsumes and showProduces params to show what content types are supported. :include-open-api: open-api/uber.json {method: \"get\", path: \"/v1/estimates/time\", showConsumes: true, showProduces: true}"],["snippets@@open-API@@time-estimates","Snippets","Open API","Time Estimates","Use the autoSection property to automatically generate a page section with a title taken from an operation summary. :include-open-api: open-api/uber.yaml {method: \"get\", path: \"/v1/estimates/time\", autoSection: true} Note: The section below is automatically generated by include-open-api"],["snippets@@open-API@@time-estimates","Snippets","Open API","Time Estimates","Specify tags to automatically generate multiple entries from a service definition file. :include-open-api: open-api/uber.json {tags: \"Estimates\", autoSection: true} Note: The sections below are automatically generated by include-open-api"],["snippets@@CLI@@command-parameters","Snippets","CLI","Command Parameters","To bring attention to important parameters in your examples use the cli-command extension. :include-cli-command: my-super-command paramA --important-flag=true {paramsToHighlight: \"important\"} my-super-command paramA --important-flag=true Note: Parameter names gets matched as long as their names contain the passed value."],["snippets@@CLI@@long-commands","Snippets","CLI","Long Commands","Long command lines will be automatically wrapped into multiple lines. another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 Use threshold parameter to specify the max length of a line before splitting: :include-cli-command: another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 { paramsToHighlight: [\"name\", \"value\"], threshold: 30 } another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 Use splitAfter to force line splitting after specified parameter: :include-cli-command: another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 { paramsToHighlight: [\"name\", \"value\"], splitAfter: [\"--score=2\", \"--value=8\"] } another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 Note: Unlike paramsToHighlight , splitAfter must be an exact match"],["snippets@@CLI@@handle-special-symbols","Snippets","CLI","Handle Special Symbols","If your command contains special symbols, such as { , move the command definition to a command option :include-cli-command: {command: \"another-command {file1} [file2]\", paramsToHighlight: [\"file1\"]} another-command {file1} [file2]"],["snippets@@CLI@@from-file","Snippets","CLI","From File","You can read a command from file. :include-cli-command: {commandFile: \"cli/command.txt\", paramsToHighlight: \"value\"} my-captured-command --param=10 --another=value my-captured-command --param=10 --another=value This option is useful for displaying a captured command during tests."],["snippets@@CLI@@output","Snippets","CLI","Output","To display console output and bring attention to certain lines use: :include-cli-output: cli/file-path-of-captured.out {highlight: [0, 4]} Delta compression using up to 8 threads. Compressing objects: 100% (16/16), done. Writing objects: 100% (16/16), 1.34 KiB | 0 bytes/s, done. Total 16 (delta 14), reused 0 (delta 0) remote: Resolving deltas: 100% (14/14), completed with 10 local objects. To https://github.com/testingisdocumenting/znai.git ea44003..e310685 master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.25 KiB | 0 bytes/s, done. Total 13 (delta 11), reused 0 (delta 0) remote: Resolving deltas: 100% (11/11), completed with 11 local objects. To https://github.com/testingisdocumenting/znai.git e310685..900e0be master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 33, done. Delta compression using up to 8 threads. Compressing objects: 100% (33/33), done. Writing objects: 100% (33/33), 3.34 KiB | 0 bytes/s, done. Total 33 (delta 28), reused 0 (delta 0) remote: Resolving deltas: 100% (28/28), completed with 14 local objects. To https://github.com/testingisdocumenting/znai.git 900e0be..bb9993f master -> master You can highlight by a partial line text match: :include-cli-output: cli/file-path-of-captured.out {highlight: \"remote\"} Or you can highlight by lines stored in a separate file: :include-cli-output: cli/file-path-of-captured.out {highlightFile: \"cli/file-path-of-asserted-lines.txt\"} remote: Writing Delta compression using up to 8 threads. Compressing objects: 100% (16/16), done. Writing objects: 100% (16/16), 1.34 KiB | 0 bytes/s, done. Total 16 (delta 14), reused 0 (delta 0) remote: Resolving deltas: 100% (14/14), completed with 10 local objects. To https://github.com/testingisdocumenting/znai.git ea44003..e310685 master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.25 KiB | 0 bytes/s, done. Total 13 (delta 11), reused 0 (delta 0) remote: Resolving deltas: 100% (11/11), completed with 11 local objects. To https://github.com/testingisdocumenting/znai.git e310685..900e0be master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 33, done. Delta compression using up to 8 threads. Compressing objects: 100% (33/33), done. Writing objects: 100% (33/33), 3.34 KiB | 0 bytes/s, done. Total 33 (delta 28), reused 0 (delta 0) remote: Resolving deltas: 100% (28/28), completed with 14 local objects. To https://github.com/testingisdocumenting/znai.git 900e0be..bb9993f master -> master"],["snippets@@CLI@@presentation-mode","Snippets","CLI","Presentation Mode","In presentation mode, cli-command will simulate typing inside the terminal.If your cli-output is long, you can split the presentation output into chunks: :include-cli-output: cli/file-path-of-captured.out {highlight: [0, 4], chunkSize: 10, fadedSize: 2} chunkSize specifies the maximum number of lines visible at a time. fadedSize specifies how many lines will be visible after and before as you move through output (default is 2). Delta compression using up to 8 threads. Compressing objects: 100% (16/16), done. Writing objects: 100% (16/16), 1.34 KiB | 0 bytes/s, done. Total 16 (delta 14), reused 0 (delta 0) remote: Resolving deltas: 100% (14/14), completed with 10 local objects. To https://github.com/testingisdocumenting/znai.git ea44003..e310685 master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.25 KiB | 0 bytes/s, done. Total 13 (delta 11), reused 0 (delta 0) remote: Resolving deltas: 100% (11/11), completed with 11 local objects. To https://github.com/testingisdocumenting/znai.git e310685..900e0be master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 33, done. Delta compression using up to 8 threads. Compressing objects: 100% (33/33), done. Writing objects: 100% (33/33), 3.34 KiB | 0 bytes/s, done. Total 33 (delta 28), reused 0 (delta 0) remote: Resolving deltas: 100% (28/28), completed with 14 local objects. To https://github.com/testingisdocumenting/znai.git 900e0be..bb9993f master -> master"],["snippets@@math@@latex","Snippets","Math","LATEX","To render math you can use https://en.wikibooks.org/wiki/LaTeX/Mathematics LaTeX math expressions. Surround LaTeX expression with fenced block and specify latex as a language ```latex \\forall x \\in X, \\quad \\exists y \\leq \\epsilon ``` The result will be a following math expression. \\forall x \\in X, \\quad \\exists y \\leq \\epsilon In presentation mode, rendered expressions will automatically scale to make use of the screen space.Note: Rendering is done by using https://github.com/Khan/KaTeX KaTeX library. And is using https://github.com/Khan/KaTeX KaTeX fonts."],["snippets@@jupyter-notebook@@code-and-output","Snippets","Jupyter Notebook","Code and Output","Use include-jupyter to include http://jupyter.org/ Jupyter notebook inside your documentation. :include-jupyter: jupyter/simple-notebook.ipynb Note: Remember that you can define lookup paths for files like notebooks inside flow/lookup-paths lookup-paths file, so you don't have to copy and paste notebooks to your documentation directory."],["snippets@@jupyter-notebook@@pandas","Snippets","Jupyter Notebook","Pandas","Markdown from your notebook will be seamlessly integrated into your current page. First level # headers will become part of Table Of Contents and part of a search unit. :include-jupyter: notebook-with-markdown-story.ipynb Note: below text is auto generated, including the Panda sectionDisplaying values using panda display Values can be displayed using standard console outputOr using library to render a html snippet"],["snippets@@jupyter-notebook@@two-sides","Snippets","Jupyter Notebook","Two Sides","You will learn about the layout/two-sides-pages Two Sides Layout in the Layout section. If you are are curious now for examples, jump to layout/jupyter-notebook-two-sides Jupyter Two Sides example"],["snippets@@markdown@@single-markdown-file","Snippets","Markdown","Single Markdown File","To reuse Markdown in several places without duplication, use the include-markdown plugin. :include-markdown: markdown-dir/md-to-include.md This markdown, and the sub-heading above, were included using the include-markdown plugin. Super easy."],["snippets@@markdown@@multiple-markdown-files","Snippets","Markdown","Multiple Markdown Files","You can also include all the Markdown files within a directory by using include-markdowns .This plugin can be used to generate release notes or an FAQ page. :include-markdowns: markdown-dir This markdown, and the sub-heading above, were included using the include-markdown plugin. Super easy. This markdown, and the sub-hed above, were included using the include-markdowns plugin. Please notice the s. This markdown, and the sub-hed above, were included using the include-markdowns plugin. Please notice the s. bash $ command specific to external Note: include-markdowns displays the files of the specified directory based on the filename, in alphabetical order."],["snippets@@markdown@@optional-markdown","Snippets","Markdown","Optional Markdown","When you document an open source project you may have different instructions based on where the documentation is deployed.For example, this documentation has two versions, one deployed internally at Two Sigma and one deployed externally using GitHub Pages. Most of the documentation parts are the same, but there are differences in sections like Getting Started.We build documentation twice and the differences are handled by :include-markdown: 's firstAvailable parameter. :include-markdown: {firstAvailable: [ \"markdown-dir/getting-started-step-internal.md\", \"markdown-dir/getting-started-step-external.md\"]} bash $ command specific to external"],["layout@@attention-signs@@speed-bump","Layout","Attention Signs","Speed Bump","People skim through documentation. You can grab users attention by using attention signs.To create an attention sign, start a paragraph with one of the predefined keywords followed by a colon. Keyword: message"],["layout@@attention-signs@@note","Layout","Attention Signs","Note","Note: It is very important to not overuse signs. Make sure each sign counts. Note: It is very important to not overuse signs. Make sure each sign counts."],["layout@@attention-signs@@warning","Layout","Attention Signs","Warning","Warning: Bring attention to a common mistake or an often missed configuration step using a warning sign. Do not use too many warning signs. Warning: Bring attention to a common mistake or an often missed configuration step using a warning sign. Do not use too many warning signs."],["layout@@attention-signs@@avoid","Layout","Attention Signs","Avoid","Avoid: using multiple versions of `ReactJS` inside one project. Avoid: using multiple versions of ReactJS inside one project."],["layout@@attention-signs@@do-not","Layout","Attention Signs","Do Not","Don't: commit node_modules to your repository Do not: commit node_modules to your repository Don't: commit node_modules to your repositoryDo not: commit node_modules to your repository"],["layout@@attention-signs@@question","Layout","Attention Signs","Question","Question: Use the question sign to bring an extra attention to the main idea of a page. \\ What is the point of the `attention signs`? Question: Use the question sign to bring extra attention to the main idea of a page. What is the point of the attention signs ?"],["layout@@tabs@@primary-use-case","Layout","Tabs","Primary Use Case","Imagine your product supports multiple ways of achieving a final result:RESTWebCLIJavaPythonmore...You can use tabs to allow your user to choose the method to accomplish the goal covered in the documentation. Tab selections will persist for users and provide streamlined experience.Don't: use tabs as navigation experience. If your user needs both Java and Python executed one by one you need to show steps one after the other in proper order."],["layout@@tabs@@definition","Layout","Tabs","Definition","To define multiple tabs we use fenced code block: ```tabs JavaScript: :include-file: snippets/file-name.js Java: :include-file: snippets/WideCode.java Cpp: :include-cpp: snippets/simple.cpp {entry: 'main', bodyOnly: true} ``` This will generate a multi-tab widget with include- plugin content for each tab. JavaScript class JsClass { constructor() { usefulAction() } } export default JsClass Java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Cpp Selecting a tab will switch all the tabs on every page."],["layout@@tabs@@markdown-per-tab","Layout","Tabs","Markdown Per Tab","Any valid Markdown can be used in place of include- content.A typical use case for installation instructions might be dividing content per language or environment: ````tabs JavaScript: First you need to download WebStorm and then run the following using your terminal ```bash $ yarn install $ yarn start ``` Java: First you need to download Intellij IDEA and then run the following using your terminal ```bash $ mvn install $ mvn exec:exec ``` Cpp: First you need to download CLion and then run the following using your terminal ```bash $ pwd $ whoamis ``` ```` JavaScript First you need to download WebStorm and then run the following using your terminal bash $ yarn install $ yarn start Java First you need to download Intellij IDEA and then run the following using your terminal bash $ mvn install $ mvn exec:exec Cpp First you need to download CLion and then run the following using your terminal bash $ pwd $ whoamis"],["layout@@tabs@@separate-markdown-files","Layout","Tabs","Separate Markdown Files","Consider extracting content to separate markup files if content becomes long. Use the include-markdown plugin to include external content. ```tabs JavaScript: :include-markdown: instructions/javascript-install.md Java: :include-markdown: instructions/java-install.md Cpp: :include-markdown: instructions/cpp-install.md ``` Each tab will display inlined markdown from specified files. JavaScript First you need to download WebStorm and then run the following using your terminal $ yarn install $ yarn start Java First you need to download Intellij IDEA and then run the following using your terminal $ mvn install $ mvn exec:exec Cpp First you need to download CLion and then run the following using your terminal $ pwd $ whoami"],["layout@@tabs@@attention-signs","Layout","Tabs","Attention Signs","Use extra space(s) in front of Note: or other attention sign keywords to put attention signs inside a tab. Remember if you put 4+ spaces, your paragraph will become a code snippet. ````tabs JavaScript: ```bash $ yarn install $ yarn start ``` Avoid: committing node_modules Java: First you need to download Intellij IDEA and then run the following using your terminal ```bash $ mvn install $ mvn exec:exec ``` Warning: `mvn` install for the first time may take considerable amount of time Cpp: First you need to download CLion and then run the following using your terminal ```bash $ pwd $ whoamis ``` Question: is C++ awesome or what? ```` JavaScript bash $ yarn install $ yarn start Do not: commit node_modules to the repository Java First you need to download Intellij IDEA and then run the following using your terminal bash $ mvn install $ mvn exec:exec Warning: mvn install for the first time may take considerable amount of time Cpp First you need to download CLion and then run the following using your terminal bash $ pwd $ whoamis Question: is C++ awesome or what?"],["layout@@tables@@csv","Layout","Tables","CSV","Instead of aligning tables using one of the standard Markdown extensions, you can use your CSV editor of choice. :include-table: table.csv In this way, the following CSV file... Account, Price, Description #12BGD3, 100, custom table with a long attachment #12BGD3, 150, chair #91AGB1, 10, lunch ...will render like so: Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch"],["layout@@tables@@json","Layout","Tables","JSON","A similar extension can be used to display data from a JSON file representing tabular data. :include-table: table.json So the following JSON file... [ { \"Account\": \"#12BGD3\", \"Price\": 100, \"Description\": \"custom table with a long attachment\" }, { \"Account\": \"#12BGD3\", \"Price\": 150, \"Description\": \"chair\" }, { \"Account\": \"#91AGB1\", \"Price\": 10, \"Description\": \"lunch\" } ] ...will render like so: Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch"],["layout@@tables@@title","Layout","Tables","Title","Use title parameter to set a table title. :include-table: table.json {title: \"Monthly Report\"} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch"],["layout@@tables@@arrange-and-filter","Layout","Tables","Arrange and Filter","To change the order of columns or to filter out certain columns, specify the columns parameter. :include-table: table.csv {columns: [\"Description\", \"Price\"]} Description Price custom table with a long attachment 100 chair 150 lunch 10"],["layout@@tables@@alignment-and-width","Layout","Tables","Alignment and Width","By default column width is auto-calculated to fit the values inside. But you can control the width with the extra options. :include-table: table.csv {Price: {width: 200}, \"Description\": {width: 400}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch And if you need to change a column alignment from default left to right just add the align property. :include-table: table.csv {Price: {width: 200, align: \"right\"}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch You can do the same for JSON data: :include-table: table.json {Price: {width: 100, align: \"right\"}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch"],["layout@@tables@@markdown-in-cells","Layout","Tables","Markdown in Cells","You can use Markdown table syntax within your table file. Account, Price, Description #12BGD3, 100, **custom** table with a long attachment #12BGD3, 150, chair #91AGB1, 10, `lunch` Account Price Description #12BGD3 100 **custom** table with a long attachment #12BGD3 150 chair #91AGB1 10 `lunch`"],["layout@@tables@@github-flavored-table","Layout","Tables","Github Flavored Table","| Github | Flavored | Table | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | Github Flavored Table [{text=col 3 is, type=SimpleText}] [{text=right-aligned, type=SimpleText}] [{text=$1600, type=SimpleText}] [{text=col 2 is, type=SimpleText}] [{text=centered, type=SimpleText}] [{text=$12, type=SimpleText}]"],["layout@@columns@@information-layout","Layout","Columns","Information Layout","The way your information is laid out affects how easy it is to comprehend any given material. Some content benefits from being formatted side-by-side. Some examples are:Before-and-after transitionAction and its resultInput and output"],["layout@@columns@@definition","Layout","Columns","Definition","To define columns layout use a fenced block plugin with the columns keyword: ```columns left: this content goes to the left and can span multiple lines right: this content goes to the right and can span multiple lines ``` this content goes to the leftand can span multiple lines this content goes to the rightand can span multiple lines"],["layout@@columns@@sizes","Layout","Columns","Sizes","Size can be specified for a column as a portion . By default both portions are assigned a value of 10 . If you specify portion to be 3 for left column it will occupy 0.3 of the space. ```columns {left: {portion: 3}} left: this content goes to the left and can span multiple lines right: this content goes to the right and can span multiple lines ``` this content goes to the leftand can span multiple lines this content goes to the rightand can span multiple lines"],["layout@@columns@@border","Layout","Columns","Border","You can add a border to your columns. ```columns {left: {portion: 3}, border: true} left: **Argument Name** right: Argument description and what argument is for ``` ```columns {left: {portion: 3}, border: true} left: **Another Name** right: Argument description and what argument is for ``` Argument Name Argument description and what argument is for Another Name Argument description and what argument is for"],["layout@@columns@@alignment","Layout","Columns","Alignment","Specify text alignment using align . ```columns {left: {portion: 3, align: \"right\"}, border: true} left: **Argument Name** *optional* right: Argument description and what argument is for ``` Argument Nameoptional Argument description and what argument is for"],["layout@@templates@@dont-repeat-yourself","Layout","Templates","Don't Repeat Yourself","Define templates when you need to reuse the same layout.Suppose you are have to display multiple elements like the following: Name: JohnTitle: Software EngineerCurrent Project: BBRTeam: Team A Name: SathishTitle: Software EngineerCurrent Project: BBRTeam: Team A"],["layout@@templates@@definition","Layout","Templates","Definition","Instead of copy and pasting, define a template in a separate file. Znai uses the http://freemarker.org FreeMarker template engine. **Name**: ${name} **Title**: ${title} **Current Project**: BBR **Team**: Team A Insert your template using the fenced block syntax. The content inside the fenced block is treated as key/values. ```template templates/job.md name: Sathish title: Software Engineer ``` The result is rendered below: Name: SathishTitle: Software EngineerCurrent Project: BBRTeam: Team A"],["layout@@templates@@inlined","Layout","Templates","Inlined","Consider inlined templates if you don't need to pass a lot of parameter text to the template. :include-template: templates/arg-definition.md {name: \"Arg Name\", description: \"Description of the argument\"} :include-template: templates/arg-definition.md {name: \"Other Name\", optional: true, description: \"Yet another description of the argument\"} templates/arg-definition.md ```columns {left: {portion: 3, align: \"right\"}, border: true} left: **${name}** <#if optional??> \\ *optional* </#if> right: ${description} ``` Arg Name Description of the argument Other Name optional Yet another description of the argument"],["layout@@templates@@external-parameters","Layout","Templates","External Parameters","Templates can get parameters from an external file. The file can be either manually created or generated by a script or test.Consider an external JSON file... { \"name\": \"specified name\", \"code\": \"class CodeSnippet {\\n ...\\n}\", \"description\": \"generated description\" } ...and a template like the following: `````columns {left: {align: \"right\", portion: 3}, border: true} left: ${name} right: ${description} ```java ${code} ``` ````` You can include a template in your page and make use of parameters from the file: :include-template: templates/test-artifact.md {paramsPath: \"artifacts/generated-values.json\"} specified name generated description java class CodeSnippet { ... }"],["layout@@templates@@loops","Layout","Templates","Loops","You can loop over a list of parameters using http://freemarker.org/docs/ref_directive_list.html FreeMarker loopConsider an external file... {\"names\": [ {\"name\": \"Name 1\", \"description\": \"Description 1\"}, {\"name\": \"Name 2\", \"description\": \"Description 2\", \"optional\": \"true\"}, {\"name\": \"Name 3\", \"description\": \"Description 3\"} ]} ...and this template: <#list names as n> ```columns {left: {portion: 3, align: \"right\"}, border: true} left: **${n.name}** <#if n.optional??> \\ *optional* </#if> right: ${n.description} ``` </#list> :include-template: templates/multiple-arg-definition.md {paramsPath: \"artifacts/names.json\"} Name 1 Description 1 Name 2 optional Description 2 Name 3 Description 3"],["layout@@two-sides-pages@@setup","Layout","Two Sides Pages","Setup","To enable two-sided layout as seen on this page, add the following at the beginning of a Markdown file: markdown --- type: two-sides ---"],["layout@@two-sides-pages@@details-side","Layout","Two Sides Pages","Details Side","Use the right pane to display additional details. It could be a REST response or a code snippet.Use include-meta in front of some content to place it on the right side of the page. All the following content will go to the right side. At the start of a new section it will be reset. markdown :include-open-api: snippets/open-api/uber.json {method: \"get\", path: \"/v1/estimates/time\"} :include-meta: {rightSide: true} :include-json: two-sides/price-estimate.json"],["layout@@two-sides-pages@@aligning-data-in-columns","Layout","Two Sides Pages","Aligning Data in Columns","Use an include-empty-block to align code snippets or other data block on both sides when there is an extra text on either side. Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch Account, Price, Description #12BGD3, 100, custom table with a long attachment #12BGD3, 150, chair #91AGB1, 10, lunch Table and code snippets above are aligned by using an empty block on the right side. Use an `include-empty-block` to align code snippets or other data block on both sides when there is an extra text on either side. :include-empty-block: {rightSide: true} :include-table: layout/table.csv :include-meta: {rightSide: true} :include-file: layout/table.csv"],["layout@@two-sides-pages@@single-data-block-shortcut","Layout","Two Sides Pages","Single Data Block Shortcut","Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch Account, Price, Description #12BGD3, 100, custom table with a long attachment #12BGD3, 150, chair #91AGB1, 10, lunch If need to put a single data block to a right side, you can add rightSide: true as a parameter to include- plugins. # Single Data Block Shortcut :include-table: layout/table.csv :include-file: layout/table.csv {rightSide: true}"],["layout@@two-sides-tabs@@unified-tabs","Layout","Two Sides Tabs","Unified Tabs","In two sides layout tabs selection is moved to a single place (default is top right panel)."],["layout@@two-sides-tabs@@definition","Layout","Two Sides Tabs","Definition","To define multiple tabs we use fenced code block ```tabs JavaScript: :include-file: snippets/file-name.js Java: :include-file: snippets/WideCode.java Cpp: :include-cpp: snippets/simple.cpp {entry: 'main', bodyOnly: true} ``` This will generate a multi-tab widget with an include plugin content per tab.Note: Selecting a tab will switch all the tabs on every page. JavaScript class JsClass { constructor() { usefulAction() } } export default JsClass Java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Cpp"],["layout@@two-sides-tabs@@markdown-per-tab","Layout","Two Sides Tabs","Markdown Per Tab","Any valid Markdown can be used as the content of each tab. Typical use case for installation instructions: extract differences per language or environment ````tabs JavaScript: First you need to download WebStorm and then run the following using your terminal ```bash $ yarn install $ yarn start ``` Java: First you need to download Intellij IDEA and then run the following using your terminal ```bash $ mvn install $ mvn exec:exec ``` Cpp: First you need to download CLion and then run the following using your terminal ```bash $ pwd $ whoamis ``` ```` JavaScript First you need to download WebStorm and then run the following using your terminal bash $ yarn install $ yarn start Java First you need to download Intellij IDEA and then run the following using your terminal bash $ mvn install $ mvn exec:exec Cpp First you need to download CLion and then run the following using your terminal bash $ pwd $ whoamis"],["layout@@jupyter-notebook-two-sides@@code-first","Layout","Jupyter Notebook Two Sides","Code First","snippets/jupyter-notebook The include-jupyter extension automatically assigns {meta: {rightSide: true}} to output cells. If page type is set to two-sides you will get automatic split between code and output.Note: Content below is included using include-jupyter"],["layout@@jupyter-notebook-two-sides@@pandas","Layout","Jupyter Notebook Two Sides","Pandas","Use storyFirst if you use a notebook with Markdown cells to tell a story. In this mode, code will be moved to the right side and a reader can focus on the story itself. :include-jupyter: notebook.ipynb {storyFirst: true} Displaying values using panda display Values can be displayed using standard console outputOr using library to render a html snippet"],["visuals@@spoilers@@hidden-content","Visuals","Spoilers","Hidden Content","To hide content use the spoiler fence plugin ````spoiler Information you don't want users to see right away goes here. Can use all the markdown inside 1. item A 2. item B ``` let list = [1, 2, 3] let value = 0 ``` ```` Information you don't want users to see right away goes here. Can use all the markdown insideitem Aitem B let list = [1, 2, 3] let value = 0 Note: Four backticks were used instead of the usual three. This is done so one fence block can include another block (code snippet) without confusion. It can be any number of backticks greater than three."],["visuals@@spoilers@@hidden-content-title","Visuals","Spoilers","Hidden Content Title","Use the title parameter to set a custom title for your spoiler. ```spoiler {title: \"Are you ready to see what's inside?\"} ... ``` Line OneLine TwoLine Three"],["visuals@@smart-bullet-points@@types","Visuals","Smart Bullet Points","Types","Bullet points are an essential tool in the presentation of information. Frequent use of bullet points however may make documentation and presentation boring.You can change the way bullet points are rendered by using the meta plugin. :include-meta: {bulletListType: \"BulletsListType\"} * Testing * Design * Code Review * Documentation"],["visuals@@smart-bullet-points@@left-right-timeline","Visuals","Smart Bullet Points","Left Right Timeline","Use LeftRightTimeLine to outline your flow. This also splits related things by moving odd points to the left and even to the right. :include-meta: {bulletListType: \"LeftRightTimeLine\"} * Testing * Design * Code Review * Documentation TestingDesignCode ReviewDocumentation"],["visuals@@smart-bullet-points@@venn","Visuals","Smart Bullet Points","Venn","Use Venn to display overlapping relationships.VelocityVolumeVariety"],["visuals@@smart-bullet-points@@steps","Visuals","Smart Bullet Points","Steps","Use Steps to outline a procedure.Install IDEALearn JavaLearn Machine LearningUse differentColors: true to use distinct colors for each step :include-meta: {bulletListType: \"Steps\", differentColors: true} Install IDEALearn JavaLearn Machine Learning"],["visuals@@smart-bullet-points@@presentation-only","Visuals","Smart Bullet Points","Presentation Only","If you want to change bullets type only for presentation use: :include-meta: {presentationBulletListType: \"BulletsListType\"}"],["visuals@@smart-bullet-points@@horizontal-stripes","Visuals","Smart Bullet Points","Horizontal Stripes","The following bullet points will be rendered as horizontal striped, but only in presentation mode. :include-meta: {presentationBulletListType: \"HorizontalStripes\"} Lessons LearnedFuture PlansBackup Strategy"],["visuals@@icons@@glyphicons","Visuals","Icons","Glyphicons","Icons can be included using the inlined code plugin. `:icon: cloud` The result will be appear inline in the current paragraph Glyphicon's list of icons is available here: http://getbootstrap.com/components/#glyphicons http://getbootstrap.com/components/#glyphicons"],["visuals@@icons@@bullet-points","Visuals","Icons","Bullet Points","Icons can also be used as bullet points replacement: * `:icon: time` Time is important * `:icon: cog` Setup must be easy Time is important Setup must be easy"],["visuals@@keyboard-shortcuts@@inlined-keyboard-shorcuts","Visuals","Keyboard Shortcuts","Inlined Keyboard Shorcuts","Keyboard shortcuts can be included using the inlined code plugin. To open a configuration screen press `:kbd: F4`. To open a configuration screen press ."],["visuals@@keyboard-shortcuts@@multiple-keys","Visuals","Keyboard Shortcuts","Multiple Keys","To provide multiple keys, simply separate them with a space. `:kbd: Alt Ctrl F7`"],["visuals@@charts@@pie","Visuals","Charts","Pie","Given a CSV file... label, value A, 10 B, 20 C, 15 D, 8 ..to build a pie chart use: :include-chart: data.csv {type: \"Pie\"} You can change the style with the innerRadius property: :include-chart: data.csv {type: \"Pie\", innerRadius: 100}"],["visuals@@charts@@bar","Visuals","Charts","Bar","To build a vertical bar chart use: :include-chart: data.csv To build a horizontal bar chart use: :include-chart: data.csv {horizontal: true}"],["visuals@@charts@@line","Visuals","Charts","Line","To build a line chart use: :include-chart: data.csv {type: \"Line\"}"],["visuals@@charts@@presentation-mode","Visuals","Charts","Presentation Mode","In presentation mode, chart values for Bar and Pie appear one at a time. To force all values to appear at once use: :include-meta: {allAtOnce: true}"],["visuals@@charts@@victory-charts","Visuals","Charts","Victory Charts","Znai uses the https://github.com/FormidableLabs/victory-chart VictoryChart library to render charts."],["visuals@@images@@markdown","Visuals","Images","Markdown","An image can be included using standard Markdown syntax. ![alt text](regular-image.png) null regular-image.png alt text"],["visuals@@images@@extension","Visuals","Images","Extension","Znai adds additional extension to provide additional information:captionannotationsfit parameters"],["visuals@@images@@caption","Visuals","Images","Caption","To add a caption at the top of an image use: :include-image: castle.jpg {caption: \"Title of an image\"} To add a caption at the bottom of an image use: :include-image: castle.jpg {caption: \"Title of an image\", captionBottom: true}"],["visuals@@images@@fit","Visuals","Images","Fit","An unfitted image will occupy all available space:To fit the image to the width of a text use the fit parameter. :include-image: books.jpg {fit: true}"],["visuals@@images@@scale-ratio","Visuals","Images","Scale Ratio","To scale image up or down use scaleRatio option, 1 is default, 0.5 is half image size. :include-image: books.jpg {scaleRatio: 0.3}"],["visuals@@image-annotations@@annotations-file","Visuals","Image Annotations","Annotations File",":include-image: word-toolbar.jpg {annotationsPath: 'annotations.json'} {\"shapes\": [{\"type\": \"arrow\", \"id\":\"a1\", \"beginX\": 200, \"beginY\": 100, \"endX\": 48, \"endY\": 42, \"color\": \"a\", \"text\": \"debug\"}, {\"type\": \"rectangle\", \"id\":\"r1\", \"x\": 200, \"y\": 50, \"width\": 100, \"height\": 40, \"color\": \"b\", \"text\": \"debug\"}, {\"type\": \"circle\", \"id\": \"c1\", \"x\": 350, \"y\": 100, \"r\": 30, \"color\": \"c\", \"text\": \"text\"}]} There are different types of annotations:CirclesRectanglesArrowsetc."],["visuals@@image-annotations@@integration-with-testing","Visuals","Image Annotations","Integration With Testing","It is possible to generate an annotations file by using UI testing framework.For example https://github.com/testingisdocumenting/webtau webtau automatically generates an annotations file in addition to capturing a screenshot."],["visuals@@image-annotations@@presentation-mode","Visuals","Image Annotations","Presentation Mode","Annotated images automatically participate in presentation mode. Annotations appear one by one and scale to match the zoom level of a presentation."],["visuals@@SVG@@retina-displays","Visuals","SVG","Retina Displays","To have crisp documentation images on high DPI displays use SVG images. :include-svg: with-groups.svg"],["visuals@@SVG@@ids-to-reveal","Visuals","SVG","Ids To Reveal","If you have groups that you want to display while hiding everything else, pass the IDs to the idsToReveal property. :include-svg: with-groups.svg {idsToReveal: [\"partA\", \"partB\"]} In presentation mode, groups will be displayed one at a time in the order specified.To force all specified parts to appear at once add this before (either in the same section, or at the start of a document). :include-meta: {allAtOnce: true} This SVG image is taken and modified from https://www.shareicon.net/pyramid-piramid-draw-stock-877888 https://www.shareicon.net/pyramid-piramid-draw-stock-877888 <?xml version=\"1.0\" ?> <svg version=\"1.1\" viewBox=\"0 0 512 512\" width=\"256\" height=\"256\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <style type=\"text/css\"> .st0{fill:#5CB8CD;} .st1{fill:#FB8A52;} .st2{fill:#152D39;} .st3{fill:#E8E8E8;} </style> <g id=\"partA\"> <path class=\"st2\" d=\"M109.4,397.7c-0.8-3.8-0.4-7.9,1.4-11.8l127.9-279.4c2.3-5.1,6.4-8.5,11-10.1V6 c-4.6,1.6-8.6,4.9-11,10.1L52.1,423.6c-1.9,4.1-2.2,8.3-1.3,12.2L109.4,397.7z\" /> <path class=\"st2\" d=\"M160.4,325.4c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4 S204.2,325.4,160.4,325.4z\" /> <circle class=\"st3\" cx=\"160.4\" cy=\"246\" r=\"68.1\"/> <path class=\"st2\" d=\"M168.2,253.3h-11.3l-2.7,7.8H150l10.9-30.1h3.5l10.6,30.1h-4.2L168.2,253.3z M158,249.9h9l-4.4-12.9h-0.1 L158,249.9z\"/> </g> <g id=\"partC\"> <path class=\"st1\" d=\"M394.8,409.5c-3,2.1-6.8,3.4-10.9,3.4H128.1c-4.7,0-8.9-1.6-12.1-4.3l-58.3,37.9 c3.2,2.5,7.2,4,11.8,4h373.1c4,0,7.6-1.2,10.5-3.2L394.8,409.5z\" /> <path class=\"st1\" d=\"M262.4,506c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4 S306.1,506,262.4,506z\" /> <circle class=\"st3\" cx=\"262.4\" cy=\"426.6\" id=\"XMLID_7_\" r=\"68.1\"/> <path class=\"st1\" d=\"M274.8,432.6l0,0.1c0.1,3.1-1,5.7-3.3,7.8c-2.3,2.1-5.2,3.2-8.9,3.2c-3.8,0-6.8-1.3-9.2-4 c-2.4-2.7-3.6-6.1-3.6-10.2v-5.9c0-4.1,1.2-7.5,3.6-10.2c2.4-2.7,5.4-4,9.2-4c3.8,0,6.8,1,9,3c2.2,2,3.3,4.7,3.2,8l0,0.1h-4.3 c0-2.3-0.7-4.2-2.1-5.5c-1.4-1.4-3.3-2-5.8-2c-2.5,0-4.5,1-6,3c-1.5,2-2.2,4.5-2.2,7.5v6c0,3,0.7,5.6,2.2,7.6c1.5,2,3.5,3,6,3 c2.5,0,4.4-0.7,5.8-2c1.4-1.3,2.1-3.2,2.1-5.6H274.8z\"/> </g> <g id=\"partB\"> <path class=\"st0\" d=\"M262.4,96.5c4.6,1.6,8.6,4.9,11,10.1l127.9,279.4c2,4.4,2.2,9.1,1,13.2l58.5,38.1 c1.4-4.3,1.2-9.1-0.9-13.6L273.4,16.1c-2.3-5.1-6.4-8.5-11-10.1V96.5z\"/> <path class=\"st0\" d=\"M364.3,325.4c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4 S408.1,325.4,364.3,325.4z\" /> <circle class=\"st3\" cx=\"364.3\" cy=\"246\" id=\"XMLID_9_\" r=\"68.1\"/> <path class=\"st0\" d=\"M352.7,263.2v-34.4h11.2c3.6,0,6.4,0.8,8.4,2.3c2,1.6,3,3.9,3,7c0,1.5-0.5,2.8-1.4,4c-0.9,1.2-2.1,2.1-3.6,2.7 c2.3,0.3,4,1.3,5.3,2.9c1.3,1.6,2,3.6,2,5.8c0,3.1-1,5.6-3.1,7.2c-2,1.7-4.8,2.5-8.3,2.5H352.7z M357.3,243.4h7.5 c1.7,0,3.1-0.5,4.2-1.4c1.1-1,1.6-2.3,1.6-4c0-1.9-0.6-3.2-1.8-4.2c-1.2-0.9-2.9-1.4-5.1-1.4h-6.6V243.4z M357.3,247.1v12.5h9 c2.1,0,3.8-0.5,4.9-1.6c1.2-1,1.8-2.5,1.8-4.5c0-1.9-0.6-3.4-1.8-4.6c-1.2-1.2-2.8-1.8-4.8-1.9h-0.3H357.3z\"/> </g> </svg>"],["visuals@@SVG@@actual-size","Visuals","SVG","Actual Size","SVGs may have additional white space around the content and have width and height property specified inside. Use actualSize: true if you want to use the actual content only and effectively crop the white space. width and height will be overridden with the cropped size. :include-svg: with-groups.svg {idsToReveal: [\"partC\"], actualSize: true} Without actualSize there would be a gap created by hiding other parts."],["visuals@@SVG@@scale","Visuals","SVG","Scale","Use scale: scaleFactor to change the size of the SVG provided :include-svg: with-groups.svg {idsToReveal: [\"partC\"], actualSize: true, scale: 0.2}"],["visuals@@flow-diagrams@@nodes-and-edges","Visuals","Flow Diagrams","Nodes and Edges","Specify a JSON file to define a flow chart. { \"nodes\": [ { \"id\": \"n1\", \"label\": \"input one\" }, { \"id\": \"n2\", \"label\": \"input two\" }, { \"id\": \"n3\", \"label\": \"processor\" }, { \"id\": \"n4\", \"label\": \"output one\" }, { \"id\": \"n5\", \"label\": \"output two\" }, { \"id\": \"n6\", \"label\": \"output three\" } ], \"edges\": [ [\"n1\", \"n3\"], [\"n2\", \"n3\"], [\"n3\", \"n4\"], [\"n3\", \"n5\"], [\"n3\", \"n6\"] ] } At the minimum edges must be provided. :include-flow-chart: simple-dag.json"],["visuals@@flow-diagrams@@multiline-labels","Visuals","Flow Diagrams","Multiline Labels","Use \\n to split your label into multiple lines. { \"nodes\": [ { \"id\": \"n1\", \"label\": \"input\\none\" }, { \"id\": \"n2\", \"label\": \"output\\ntwo\" } ], \"edges\": [ [\"n1\", \"n2\"] ] }"],["visuals@@flow-diagrams@@nodes-size","Visuals","Flow Diagrams","Nodes Size","Add config section to specify a common size for all the nodesNote: Size unit is not based on pixels. It is sized in inches (assuming correct DPI). It is the size units used by https://graphviz.gitlab.io/ Graphviz)Use width and height property on a node itself to control individual nodes size:"],["visuals@@flow-diagrams@@highlight","Visuals","Flow Diagrams","Highlight","{ \"nodes\": [ { \"id\": \"n1\", \"label\": \"label 1\" }, { \"id\": \"n2\", \"label\": \"label 2\", \"highlight\": true }, { \"id\": \"n3\", \"label\": \"label 3\" } ], \"edges\": [ [\"n1\", \"n2\"], [\"n2\", \"n3\"], [\"n1\", \"n3\"] ] } Use highlight to highlight a node.Or use highlight property of a flow-chart include plugin. :include-flow-chart: simple-dag.json {highlight: \"n3\"} Note: To highlight more than one element use {highlight: [\"n3\", \"n4\"]}"],["visuals@@flow-diagrams@@color-groups","Visuals","Flow Diagrams","Color Groups","Use colorGroup to assign a color group to a node. There are four color groups out of the box: a (default), b , c , d . { \"nodes\": [ { \"id\": \"n1\", \"label\": \"input one\" }, { \"id\": \"n2\", \"label\": \"input two\" }, { \"id\": \"n3\", \"label\": \"processor\", \"colorGroup\": \"b\" }, { \"id\": \"n4\", \"label\": \"output one\", \"colorGroup\": \"c\" }, { \"id\": \"n5\", \"label\": \"output two\", \"colorGroup\": \"c\" }, { \"id\": \"n6\", \"label\": \"output three\", \"colorGroup\": \"d\" } ], \"edges\": [ [\"n1\", \"n3\"], [\"n2\", \"n3\"], [\"n3\", \"n4\"], [\"n3\", \"n5\"], [\"n3\", \"n6\"] ] }"],["visuals@@flow-diagrams@@shapes","Visuals","Flow Diagrams","Shapes","Use shape to assign one of the predefined shapes. { \"nodes\": [ { \"id\": \"researcher\", \"label\": \"researcher\", \"shape\": \"actor\" }, { \"id\": \"db\", \"label\": \"two\", \"shape\": \"database\" }, { \"id\": \"anotherDb\", \"label\": \"three input\", \"shape\": \"database-bottom-label\" }, { \"id\": \"processor\", \"label\": \"processor\", \"colorGroup\": \"b\" }, { \"id\": \"outcome\", \"colorGroup\": \"c\", \"shape\": \"world\" }, { \"id\": \"config\", \"label\": \"config file\", \"colorGroup\": \"b\", \"shape\": \"document\" } ], \"edges\": [ [\"researcher\", \"processor\"], [\"researcher\", \"config\"], [\"db\", \"processor\"], [\"anotherDb\", \"processor\"], [\"config\", \"outcome\"], [\"processor\", \"outcome\"] ] }"],["visuals@@flow-diagrams@@legend","Visuals","Flow Diagrams","Legend","Use include-diagram-legend to add a legend to your diagram. Optionally add clickableNodes: true to insert a message that the nodes are clickable (in case you use urls). :include-diagram-legend: {a: \"inputs\", b: \"optimization process\", c: \"outcome\", d: \"unknown\", clickableNodes: true} :include-flow-chart: flow-diagrams/simple-dag-colors.json inputs optimization process outcome unknown"],["visuals@@flow-diagrams@@presentation","Visuals","Flow Diagrams","Presentation","In presentation mode nodes will be highlighted one at a time.To force all highlights to appear at once add this before (either in the same section, or at the start of a document). :include-meta: {allAtOnce: true}"],["visuals@@flow-diagrams@@vertical-layout","Visuals","Flow Diagrams","Vertical Layout","To switch layout from horizontal to vertical use vertical: true ."],["visuals@@flow-diagrams@@layout-types","Visuals","Flow Diagrams","Layout Types","Use layout to specify a different underlying layout engine. Only dot (default) and neato is supported at the moment. :include-flow-chart: simple-dag.json {layout: \"neato\"} https://www.graphviz.org/pdf/neatoguide.pdf Neato layout guide from Graphviz"],["visuals@@flow-diagrams@@links","Visuals","Flow Diagrams","Links","To attach links to nodes use url property.Combine links and highlights to create a sub navigation for your product. { \"nodes\": [ { \"id\": \"n1\", \"label\": \"No Link\" }, { \"id\": \"n2\", \"label\": \"Link To Java\", \"url\": \"snippets/java\" }, { \"id\": \"n3\", \"label\": \"Link to External\", \"url\": \"http://commonmark.org\" } ], \"edges\": [ [\"n1\", \"n2\"], [\"n3\", \"n2\"] ] }"],["visuals@@flow-diagrams@@reusable-nodes","Visuals","Flow Diagrams","Reusable Nodes","Move node definitions to a one or more separate files if you use them across multiple diagrams. { \"edges\": [ [\"a1\", \"a2\"], [\"b1\", \"b2\"], [\"b1\", \"a2\"] ] } [ { \"id\": \"a1\", \"label\": \"Label A 1\" }, { \"id\": \"a2\", \"label\": \"Label A 2\" }, { \"id\": \"a3\", \"label\": \"Label A 3\" } ] [ { \"id\": \"b1\", \"label\": \"Label B 1\" }, { \"id\": \"b2\", \"label\": \"Label B 2\" }, { \"id\": \"b3\", \"label\": \"Label B 3\" } ] :include-flow-chart: flow-diagrams/graph-using-lib.json {nodeLibPath: \"nodes/set-a.json\"} :include-flow-chart: flow-diagrams/graph-using-lib.json {nodeLibPath: [\"nodes/set-a.json\", \"nodes/set-b.json\"]}"],["visuals@@PlantUml@@in-place","Visuals","PlantUml","In Place","http://plantuml.com/sequence-diagram PlantUml is a text-based way of drawing many kinds of diagrams."],["visuals@@PlantUml@@external-file","Visuals","PlantUml","External File","If your diagram is stored in a separate file, use :include-plantuml: <path> . :include-plantuml: demo.plantuml @startuml package \"Some Group\" { HTTP - [First Component] [Another Component] } node \"Other Groups\" { FTP - [Second Component] [First Component] --> FTP } cloud { [Example 1] } database \"MySql\" { folder \"This is my folder\" { [Folder 3] } frame \"Foo\" { [Frame 4] } } [Another Component] --> [Example 1] [Example 1] --> [Folder 3] [Folder 3] --> [Frame 4] @enduml"],["deployment@@static-content@@build","Deployment","Static Content","Build","To generate static content for deployment use: znai --doc-id my-docs --deploy /path/to/static-content Using Maven: <plugin> <groupId>org.testingisdocumenting.znai</groupId> <artifactId>znai-maven-plugin</artifactId> <version>1.30</version> <configuration> <docId>my-docs</docId> <sourceRoot>${project.basedir}/documentation</sourceRoot> <deployRoot>${project.build.directory}</deployRoot> <port>3333</port> </configuration> </plugin> mvn znai:build"],["deployment@@static-hosting@@github-pages","Deployment","Static Hosting","GitHub Pages","https://pages.github.com/ GitHub Pages is a great place to deploy Documentation static content."],["synergy-with-testing@@java@@table-data","Synergy With Testing","Java","Table Data","Your business logic tests can greatly improve maintainability of your documentation. The example below tests what account types are allowed to perform Trading Activities. package org.testingisdocumenting.testing.examples import org.testingisdocumenting.webtau.data.table.TableData import org.testingisdocumenting.webtau.documentation.DocumentationArtifacts import org.junit.Test class TestToDocExample { @Test void shouldRestrictAccountsActivity() { def rules = [\"Account Type\" | \"Operation\" | \"Restriction\"] { _________________________________________________ \"SPB3\" | \"Buy Options\" | \"weekends only\" \"TR\" | \"Sell Futures\" | \"except holidays\" \"BOSS\" | \"Buy Stocks\" | \"none\" } validateRules(rules) } private static void validateRules(TableData rules) { DocumentationArtifacts.create(TestToDocExample, \"account-rules.json\", rules.toJson()) } } As part of validation of account types, the test also captures data that was used for testing. We can refer to this data later in our documentation by using the layout/tables include-table plugin :include-table: account-rules.json Your test data and user-facing documentation is now linked. Account Type Operation Restriction SPB3 Buy Options weekends only TR Sell Futures except holidays BOSS Buy Stocks none"],["synergy-with-testing@@REST@@request-and-response-capture","Synergy With Testing","REST","Request and Response Capture","It helps in understanding a REST API if there are clearly defined scenarios. Showing examples of requests used and responses received makes your documentation less abstract.Instead of manually copy-and-pasting the responses back to your documentation, consider running tests and automatically capturing the relevant artifacts."],["synergy-with-testing@@REST@@webtau","Synergy With Testing","REST","WebTau","https://testingisdocumenting.org/webtau/REST/getting-started WebTau is a framework to write, run, and capture REST tests artifacts.The bare minimum test in WebTau looks like this: package rest import static org.testingisdocumenting.webtau.WebTauGroovyDsl.* scenario(\"simple get\") { http.get(\"/weather\") { temperature.should == 88 } }"],["synergy-with-testing@@REST@@capture-rest-artifacts","Synergy With Testing","REST","Capture REST Artifacts","To capture artifacts use http.doc.capture package rest import static org.testingisdocumenting.webtau.WebTauGroovyDsl.* scenario(\"extracting id after POST to use inside GET request\") { def id = http.post(\"/employee\", [firstName: 'FN', lastName: 'LN']) { return id } http.doc.capture('employee-post') http.get(\"/employee/$id\") { firstName.should == 'FN' lastName.should == 'LN' } http.doc.capture('employee-get') // capture previous HTTP call as <docDir>/employee-get } Captured artifact is a JSON file that looks like this: { \"method\": \"GET\", \"url\": \"http://localhost:8180/employee/id-generated-2\", \"responseType\": \"application/json\", \"responseBody\": \"{\\\"firstName\\\":\\\"FN\\\",\\\"lastName\\\":\\\"LN\\\"}\\n\", \"responseBodyChecks\": { \"failedPaths\": [], \"passedPaths\": [ \"root.firstName\", \"root.lastName\" ] } }"],["synergy-with-testing@@REST@@document-rest-calls","Synergy With Testing","REST","Document REST Calls","Once the artifact is captured, include it for documentation with the rest-test plugin. :include-rest-test: REST/employee-get.json The result looks like:or:Note: all the asserted values will be automatically highlighted for your users to help you bring their attention to values of interest."],["synergy-with-testing@@web-UI@@auto-annotations","Synergy With Testing","Web UI","Auto Annotations","How to annotate images using the include-image plugin visuals/image-annotations was covered previously . Now let's automate the screenshot and annotations assignment process. PageElement signIn = $(\"#gb_70\"); PageElement input = $(\".gsfi\"); PageElement search = $(\"[name='btnK']\"); browser.open(\"http://google.com\"); browser.doc.withAnnotations( badge(signIn), highlight(input).withColor(\"green\"), arrow(search, \"Click This\").withColor(\"yellow\")).capture(\"test\"); Example above is using a Selenium-based framework to automatically take a screenshot and retrieve annotations positions. Once we have the information we can include the annotated image in our documentation. :include-image: test.png {annotationsPath: 'test.json'} The result is below:"],["configuration@@basic@@favicon","Configuration","Basic","Favicon","Put a favicon.png file inside the root of your docs (next to your toc file)"],["example-references@@domain@@trader","Example References","Domain","Trader","Trader reference placeholder"],["example-references@@domain@@transaction","Example References","Domain","Transaction","Transaction reference placeholderTransaction buy placeholderTransaction sell placeholder"],["example-references@@api@@flight-api","Example References","Api","Flight API","Flight API summary placeholder"],["example-references@@api@@book","Example References","Api","Book","Lower level explanation of fapi.book"],["example-references@@api@@query","Example References","Api","Query","Lower level explanation of fapi.query"]]
/*
 * Copyright 2019 TWO SIGMA OPEN SOURCE, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

znaiSearchIdx = lunr(function () {
    this.ref('id')
    this.field('section')
    this.field('pageTitle')
    this.field('pageSection')
    this.field('text')

    this.metadataWhitelist = ['position']

    znaiSearchData.forEach(function (e) {
        this.add({
            id: e[0],
            section: e[1],
            pageTitle: e[2],
            pageSection: e[3],
            text: e[4],
        })
    }, this)
})
